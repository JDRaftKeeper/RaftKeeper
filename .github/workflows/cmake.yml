name: CMake

on:
  push:
    branches: [ "ci-test" ]
  pull_request:
    branches: [ "ci-test" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v3

    - name: Echo env
      run: env

    - name: Echo clang
      run: which clang

    - name: Echo clang version
      run: clang --version

    - name: GLIBC version
      run: strings /lib/x86_64-linux-gnu/libc.so.6 | grep GLIBC_

    - name: Update submodule
      run: git submodule update --init --recursive

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: export CC=`which clang` CXX=`which clang++` && cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}


    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} && PARALLEL="$(($(nproc) / + 1))"  && make -j $$PARALLEL

    - name: Unit Test
      working-directory: ${{github.workspace}}/build
      run: ./src/unit_tests_dbms

    - name: Integration Test
      working-directory: ${{github.workspace}}/tests/integration
      run:  ./runner --binary ${{github.workspace}}/build/programs/raftkeeper  --base-configs-dir ${{github.workspace}}/programs/server
