/* This file describes gRPC protocol supported in ClickHouse.
 *
 * To use this protocol a client should send one or more messages of the QueryInfo type
 * and then receive one or more messages of the Result type.
 * According to that the service provides four methods for that:
 * ExecuteQuery(QueryInfo) returns (Result)
 * ExecuteQueryWithStreamInput(stream QueryInfo) returns (Result)
 * ExecuteQueryWithStreamOutput(QueryInfo) returns (stream Result)
 * ExecuteQueryWithStreamIO(stream QueryInfo) returns (stream Result)
 * It's up to the client to choose which method to use.
 * For example, ExecuteQueryWithStreamInput() allows the client to add data multiple times
 * while executing a query, which is suitable for inserting many rows.
 */

syntax = "proto3";

package clickhouse.service;


enum Error
{
    ZOK = 0;

/** System and server-side errors.
    * This is never thrown by the server, it shouldn't be used other than
    * to indicate a range. Specifically error codes greater than this
    * value, but lesser than ZAPIERROR, are system errors.
    */
    ZSYSTEMERROR = -1;

    ZRUNTIMEINCONSISTENCY = -2; /// A runtime inconsistency was found
    ZDATAINCONSISTENCY = -3;    /// A data inconsistency was found
    ZCONNECTIONLOSS = -4;       /// Connection to the server has been lost
    ZMARSHALLINGERROR = -5;     /// Error while marshalling or unmarshalling data
    ZUNIMPLEMENTED = -6;        /// Operation is unimplemented
    ZOPERATIONTIMEOUT = -7;     /// Operation timeout
    ZBADARGUMENTS = -8;         /// Invalid arguments
    ZINVALIDSTATE = -9;         /// Invliad zhandle state

/** API errors.
    * This is never thrown by the server, it shouldn't be used other than
    * to indicate a range. Specifically error codes greater than this
    * value are API errors.
    */
    ZAPIERROR = -100;

    ZNONODE = -101;                     /// Node does not exist
    ZNOAUTH = -102;                     /// Not authenticated
    ZBADVERSION = -103;                 /// Version conflict
    ZNOCHILDRENFOREPHEMERALS = -108;    /// Ephemeral nodes may not have children
    ZNODEEXISTS = -110;                 /// The node already exists
    ZNOTEMPTY = -111;                   /// The node has children
    ZSESSIONEXPIRED = -112;             /// The session has been expired by the server
    ZINVALIDCALLBACK = -113;            /// Invalid callback specified
    ZINVALIDACL = -114;                 /// Invalid ACL specified
    ZAUTHFAILED = -115;                 /// Client authentication failed
    ZCLOSING = -116;                    /// ZooKeeper is closing
    ZNOTHING = -117;                    /// (not error) no server responses to process
    ZSESSIONMOVED = -118;                /// Session moved to another server, so operation is ignored
}

message ACL
{
//    static constexpr int32_t Read = 1;
//    static constexpr int32_t Write = 2;
//    static constexpr int32_t Create = 4;
//    static constexpr int32_t Delete = 8;
//    static constexpr int32_t Admin = 16;
//    static constexpr int32_t All = 0x1F;

   int32 permissions = 1;
   string scheme = 2;
   string id = 3;
};

message Stat
{
    int64 czxid = 1;
    int64 mzxid = 2;
    int64 ctime = 3;
    int64 mtime = 4;
    int32 version = 5;
    int32 cversion = 6;
    int32 aversion = 7;
    int64 ephemeralOwner = 8;
    int32 dataLength = 9;
    int32 numChildren = 10;
    int64 pzxid = 11;
};


message WatchResponse
{
    Error error = 1;
    int32 type = 2;
    int32 state = 3;
    string path = 4;
}

message CreateRequest
{
    string path = 1;
    string data = 2;
    bool is_ephemeral = 3;
    bool is_sequential = 4;
    repeated ACL acls = 5;
}

message CreateResponse
{
    Error error = 1;
    string path_created = 2;
}

message RemoveRequest
{
    string path = 1;
    int32 version = 2;
}

message RemoveResponse
{
    Error error = 1;
}

message ExistsRequest
{
    string path = 1;
    oneof optional_watch
    {
      Watch watch = 2;
    }
}

message ExistsResponse
{
    Error error = 1;
    Stat stat = 2;
}

message GetRequest
{
    string path = 1;
    oneof optional_watch
    {
      Watch watch = 2;
    }
}

message GetResponse
{
    Error error = 1;
    string data = 2;
    Stat stat = 3;
}

message SetRequest
{
    string path = 1;
    string data = 2;
    int32 version = 3;
}

message SetResponse
{
    Error error = 1;
    Stat stat = 2;
}

message ListRequest
{
    string path = 1;
    oneof optional_watch
    {
      Watch watch = 2;
    }
}

message ListResponse
{
    Error error = 1;
    repeated string names = 2;
    Stat stat = 3;
}

message CheckRequest
{
    string path = 1;
    int32 version = 2;
}

message CheckResponse
{
    Error error = 1;
}

message Response
{
    oneof response
    {
        WatchResponse watch_response = 1;
        CreateResponse create_response = 2;
        RemoveResponse remove_response = 3;
        ExistsResponse exists_response = 4;
        GetResponse get_response = 5;
        SetResponse set_response = 6;
        ListResponse list_response = 7;
        CheckResponse check_response = 8;
        MultiResponse multi_response = 9;
        ErrorResponse error_response = 10;
    }
}

message Request
{
  oneof request
  {
    CreateRequest create_request = 1;
    RemoveRequest remove_request = 2;
    ExistsRequest exists_request = 3;
    GetRequest get_request = 4;
    SetRequest set_request = 5;
    ListRequest list_request = 6;
    CheckRequest check_request = 7;
    MultiRequest multi_request = 8;
  }
}

message ErrorResponse
{
    Error error = 1;
}

message MultiRequest
{
    repeated Request requests = 1;
}

message MultiResponse
{
    Error error = 1;
    repeated Response responses = 2;
}
//
//
//message ServiceData
//{
//   string key = 1;
//   bytes data = 2;
//}
//
message Watch
{
   string ip = 1;
   uint32 port = 2;     //gRPC Port
   string function = 3;
}
//
//message ResponseStatus
//{
//   ResponseCode code = 1;
//   string message =2;
//}
//
////
//message CreateRequestPB
//{
//   ServiceData data = 1;
//}
//
//message CreateResponsePB
//{
//   ResponseStatus status = 1;
//}
//
//message RemoveRequestPB
//{
//   string path = 1;
//}
//
//message RemoveResponsePB
//{
//   ResponseStatus status = 1;
//}
//
//message ExistsRequestPB
//{
//   string path = 1;
//   Watch watch = 2;
//}
//
//message ExistsResponsePB
//{
//   ResponseStatus status = 1;
//   bool exists = 2;
//}
//
//message GetRequestPB
//{
//   string path = 1;
//   Watch watch = 2;
//}
//
//message GetResponsePB
//{
//   ResponseStatus status = 1;
//   bytes data = 2;
//}
//
//message SetRequestPB
//{
//   ServiceData data = 1;
//}
//
//message SetResponsePB
//{
//   ResponseStatus status = 1;
//}
//
//message ListReuqestPB
//{
//   string path = 1;
//}
//
//message ListResponsePB
//{
//   ResponseStatus status = 1;
//   Watch watch = 2;
//}
//
//message CheckRequestPB
//{
//   string path = 1;
//}
//
//message CheckResponsePB
//{
//   ResponseStatus status = 1;
//}
//
//message MultiRequestPB
//{
//   repeated ServiceData datas = 1;
//}
//
//message MultiResponsePB
//{
//   ResponseStatus status = 1;
//}
//
//message CallbackRequestPB
//{
//   string path = 1;
//   string function = 2;
//}
//
//message CallbackResponsePB
//{
//   ResponseStatus status = 1;
//}

service ClickHouseService {
   rpc Create(CreateRequest) returns(CreateResponse) {};
   rpc Remove(RemoveRequest) returns(RemoveResponse) {};
   rpc Exists(ExistsRequest) returns(ExistsResponse) {};
   rpc Get(GetRequest) returns(GetResponse) {};
   rpc Set(SetRequest) returns(SetResponse) {};
   rpc List(ListRequest)returns (ListResponse) {};
   rpc Check(CheckRequest) returns(CheckResponse) {};
   rpc Multi(MultiRequest) returns(MultiResponse) {};
}

message WatchCallbackRequest
{
  Error error = 1;
  int32 type = 2;
  int32 state = 3;
  string path = 4;
}


service ClickHouseClient {
   rpc Callback(WatchCallbackRequest) returns (ErrorResponse) {}
}
